#!/usr/bin/env python

import sys, os.path
#from scapy.all import rdpcap
import struct
import numpy as np
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt
import time
from astropy.stats import sigma_clip
import warnings
from packet_func import *


ppf = 2     # packet-per-frame
bpp = 8192  # bytes per packet (payload size)
pchan = 512 # num of spec.channel in a packet
nchan = int(ppf * pchan)    # total num of spec.channel
fpgaclock = 401.066667e6

bytePayload = 8192      # packet payload size in bytes
byteHeader  = 64        # packet header size in bytes
packBlock   = 1000000   # num of packets in a block
byteBMBlock = packBlock//8  # bitmap size of a block in bytes
byteBlock   = (bytePayload+byteHeader)*packBlock + byteBMBlock  # block size in bytes
autoblock = True
autop0    = True


npack  = 1000
pack0 = 0
nBlock = 0
ylim = None
verbose = 0

inp = sys.argv[0:]
pg  = inp.pop(0)

usage = '''
%s <rudp2huge_file(s)> [options]

Note: multiple files can be supplied. each one is plotted separately.

options are:
    -n packets      # specify how many packets to read and process
                    # (%d)
    -c clock_speed  # the estinmated FPGA clock speed in MHz (%.0f)
    -b byte_per_packet  # change the byte_per_packet variable (payload only)
                        # (%d)
    --p0 pack0      # the starting packet number
                    # disable autop0 (automatic switch block if p0=0 is bad)
    --nB nBlock     # the number of block (1M packets/block) in the binary file
                    # override auto-block
    --no-ab         # disable auto-determine of nBlock (auto-block)
    --ylim YMIN YMAX    # set the plot range in y
    -v              # turn on some diagnostic info

''' % (pg, npack, fpgaclock/1e6, bpp)

if (len(inp) < 1):
    sys.exit(usage)

files = []
while inp:
    k = inp.pop(0)
    if (k == '-n'):
        npack = int(inp.pop(0))
    elif (k == '-c'):
        tmp = float(inp.pop(0))
        fpgaclock = tmp * 1e6
    elif (k == '-b'):
        bpp = int(inp.pop(0))
    elif (k == '--p0'):
        pack0 = int(inp.pop(0))
        autop0 = False
    elif (k == '--nB'):
        nBlock = int(inp.pop(0))
        autoblock = False
    elif (k == '--no-ab'):
        autoblock = False
    elif (k == '--ylim'):
        ymin = float(inp.pop(0))
        ymax = float(inp.pop(0))
        ylim = [ymin, ymax]
    elif (k == '-v'):
        verbose = 1
    elif (k.startswith('-')):
        sys.exit('unknown option: %s'%k)
    else:
        files.append(k)


print(files)
for fin in files:
    if (not os.path.isfile(fin)):
        print('file not found: %s' % fin)
        continue
    else:
        print('plotting', fin)

    t1 = time.time()

    nframe = npack // ppf     # the new spec2k_x4 bitcode outputs 4 packets per frame, each packet is 512ch, and a frame is 2048ch
    chan = np.arange(nchan)
    samprate = fpgaclock * 2.
    freq0 = np.fft.fftfreq(nchan*2, d=1/samprate) + fpgaclock
    freq = freq0[:nchan] / 1e6
    #print(freq)
    xlim = [freq[0], freq[-1]]
    print('freq[0], freq[-1]:', freq[0], freq[-1])

    fh = open(fin, 'rb')

    if (nBlock == 0 and autoblock):
        fsize = os.path.getsize(fin)
        nBlock = np.rint(fsize/byteBlock).astype(int)
        print('autoblock:', nBlock)

    if (nBlock == 0):
        print('bitmap info not used.')

    fullBM = loadFullbitmap(fh, nBlock)
    p0 = pack0
    ap = autop0
    while (ap):
        bitmap = fullBM[p0:p0+npack]
        fvalid = float(np.count_nonzero(bitmap)/npack)
        if (fvalid < 0.1):  # arbitrary threshold
            p0 += packBlock
        else:
            ap = False
    if (verbose):
        print('pack0:', p0)

    tick, spec = loadSpec(fh, p0, npack, bpp, ppf, nBlock=nBlock, verbose=verbose)
    adata2d = np.abs(spec).mean(axis=0)

    fh.close()


    png1 = '%s.png' % fin
    f1, sub1 = plt.subplots(4,4,figsize=(12,9), sharex=True, sharey=True)
    s1 = sub1.flatten()

    warnings.filterwarnings('ignore')
    for ai in range(16):
        ax = s1[ai]
        title = 'Inp%d' % ai

        y = 20*np.log10(adata2d[ai])
        ax.plot(freq, y, marker='.')
        ax.grid()
        nnz = np.count_nonzero(np.abs(adata2d[ai]))
        ax.text(0.05, 0.90, 'nonzero:%d'%nnz, transform=ax.transAxes)
        pk = y.max()
        ipk = np.ma.argmax(y)
        fpk = freq[ipk]
        ax.text(0.05, 0.80, 'peak pow:%.0f\nch:%d\nfreq:%.0fMHz'%(pk,ipk,fpk), transform=ax.transAxes, va='top')
        ax.text(0.95, 0.90, title, transform=ax.transAxes, ha='right')
        if (ylim is not None):
            ax.set_ylim(ylim)
        if (ai >= 12):
            ax.set_xlabel('freq (MHz)')
        if (ai%4 == 0):
            ax.set_ylabel('power (dB)')
    warnings.filterwarnings('default')


    ax.set_xlim(xlim)
    f1.tight_layout(rect=[0,0.03,1,0.95])
    f1.subplots_adjust(wspace=0, hspace=0)
    f1.suptitle('%s, npack=%d, nframe=%d, pack0=%d'%(fin, npack, nframe, p0))
    f1.savefig(png1)
    plt.close(f1)




    t3 = time.time()

    print('running time (sec):', t3-t1)
