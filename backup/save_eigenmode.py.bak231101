#!/usr/bin/env python

import sys, os.path
import time, gc
from glob import glob
import matplotlib.pyplot as plt
from astropy.time import Time

from packet_func import *
from calibrate_func import *
from loadh5 import *

inp = sys.argv[0:]
pg  = inp.pop(0)

bitwidth = 16
nAnt    = 16
nChan   = 1024
flim    = [400., 800.]
blocklen = 800000
nBlock  = 1
nPack   = 10000
p0      = 0
hdver   = 1
order_off = 0
fout    = 'output.eigen.h5'
user_fout = False
no_bitmap = False

ant_flag = []

usage   = '''
compute covariance matrix and save the eigenmodes from a FPGA binary file
or average of several files

syntax:
    %s <bin file(s)> [options]

options are:
    -n nPack    # read nPack from the binary file (%d)

    --p0 p0     # starting packet offset (%d)

    --nB nB     # specify the block length of the binary data
                # (default: %d)
    -o fout     # specify an output file name
                # (default: %s)
    --flag 'ant(s)'
                # specify the input number (0--15) to be flagged
    --no-bitmap # ignore the bitmap

    (special)
    --4bit      # read 4-bit data
    --hd VER    # header version (1 or 2)
    --ooff OFF  # offset added to the packet_order

''' % (pg, nPack, p0, nBlock, fout)

if (len(inp) < 1):
    sys.exit(usage)

files = []
while (inp):
    k = inp.pop(0)
    if (k == '-n'):
        nPack = int(inp.pop(0))
    elif (k == '--p0'):
        p0 = int(inp.pop(0))
    elif (k == '--nB'):
        nBlock = int(inp.pop(0))
    elif (k == '-o'):
        user_fout = True
        fout = inp.pop(0)
    elif (k == '--flag'):
        tmp = inp.pop(0).split()
        ant_flag = [int(x) for x in tmp]
        print('ant_flag:', ant_flag)
    elif (k == '--no-bitmap'):
        no_bitmap = True
    elif (k == '--4bit'):
        bitwidth = 4
    elif (k == '--hd'):
        hdver = int(inp.pop(0))
    elif (k == '--ooff'):
        order_off = int(inp.pop(0))
    elif (k.startswith('-')):
        sys.exit('unknown option: %s'%k)
    else:
        files.append(k)

nFile = len(files)
if (not user_fout):
    if (nFile == 1):   # override default fout if input is a single file
        fout = files[0] + '.eigen.h5'
print('eigenmode is saved in:', fout, '...')


# frequency in MHz
freq = np.linspace(flim[0], flim[1], nChan, endpoint=False)

attrs = {}
attrs['bitwidth'] = bitwidth
attrs['nPack'] = nPack
attrs['p0'] = p0
attrs['filename'] = files
attrs['nAnt'] = nAnt
attrs['nChan'] = nChan

ftime0 = None
tsec = []
savW2 = []  # 2 for scaled
savV2 = []
savN2 = []  # normalization used to scale the data
savN2mask = []  # normalization used to scale the data
savW3 = []  # 3 for coeff
savV3 = []

t0 = time.time()

ii = -1
for i in range(nFile):
    print(i, files[i])
    ii += 1

    fbin = files[i]

    fbase = os.path.basename(fbin)   # use 1st dir as reference
    tmp = fbase.split('.')
    ftpart = tmp[1]
    ftstr = '23'+ftpart # hard-coded to 2023!!
    ftime = datetime.strptime(ftstr, '%y%m%d%H%M%S')
    if (ftime0 is None):
        ftime0 = ftime
        unix0 = Time(ftime0, format='datetime').to_value('unix')    # local time
        unix0 -= 3600.*8.                                           # convert to UTC
        attrs['unix_utc_open'] = unix0

    dt = (ftime - ftime0).total_seconds()
    print('(%d/%d)'%(ii+1,nFile), fbin, 'dt=%dsec'%dt)
    tsec.append(dt)




    fh = open(fbin, 'rb')
    BM = loadFullbitmap(fh, nBlock, blocklen=blocklen)
    bitmap = BM[p0:p0+nPack]
    if (no_bitmap):
        bitmap = np.ones(nPack, dtype=bool)
    tick, spec0 = loadSpec(fh, p0, nPack, bitmap=bitmap, bitwidth=bitwidth, hdver=hdver, order_off=order_off, verbose=1)
    #tick, spec0 = loadSpec(fh, p0, nPack, bitmap=bitmap, bitwidth=bitwidth, verbose=1)
    #tick, spec0 = loadSpec(fh, p0, nPack, nBlock=nBlock, bitwidth=bitwidth, verbose=1)
    fh.close()

    spec = spec0.transpose((1,0,2))
    del tick, spec0
    gc.collect()
    t1 = time.time()
    print('... data loaded. elapsed:', t1-t0)

    #Cov2, norm2 = makeCov(spec, scale=True, coeff=False, bandpass=True, ant_flag=ant_flag)
    Cov2, norm2 = makeCov(spec, scale=True, coeff=False, bandpass=False, ant_flag=ant_flag)
    W2, V2 = Cov2Eig(Cov2)
    savW2.append(W2)
    savV2.append(V2)
    savN2.append(norm2)
    savN2mask.append(norm2.mask)
    Cov3, norm3 = makeCov(spec, scale=False, coeff=True, ant_flag=ant_flag)
    W3, V3 = Cov2Eig(Cov3)
    savW3.append(W3)
    savV3.append(V3)

    #Vlast[ii] = V[:,:,nAnt-1]
    t2 = time.time()
    print('... eigenmode got. elapsed:', t2-t0)

print('files loaded')
savW2 = np.array(savW2)
savV2 = np.array(savV2)
savN2 = np.ma.array(savN2, mask=savN2mask)
savW3 = np.array(savW3)
savV3 = np.array(savV3)
tsec  = np.array(tsec)



adoneh5(fout, savW2.mean(axis=0), 'W2_scale')
adoneh5(fout, savV2.mean(axis=0), 'V2_scale')
adoneh5(fout, savN2.mean(axis=0), 'N2_scale')
adoneh5(fout, savW3.mean(axis=0), 'W3_coeff')
adoneh5(fout, savV3.mean(axis=0), 'V3_coeff')

adoneh5(fout, tsec, 'winSec')
putAttrs(fout, attrs)



## plot normalization and eigenvalues
fig, sub = plt.subplots(2,1,figsize=(12,9),sharex=True)

# normalization
ax = sub[0]
for ai in range(nAnt):
    ax.plot(freq, savN2[:,ai].mean(axis=0), label='Ant%d'%ai)
ax.set_yscale('log')
ax.set_ylabel('voltage normalization')
ax.legend()

# eigenvalues
ax = sub[1]
for ai in range(nAnt):  # nMode = nAnt
    y = savW2[:,:,ai].mean(axis=0)
    ax.plot(freq, 10.*np.log10(y), label='Mode%d'%ai)
ax.set_ylabel('power (dB)')
ax.set_xlabel('freq (MHz)')
ax.legend()

fig.tight_layout(rect=[0,0.03,1,0.95])
fig.suptitle(fout)
fig.savefig('%s.png'%fout)
plt.close(fig)


